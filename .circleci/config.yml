version: 2.1

commands:
  install_awscli:
    description: install aws cli v2
    steps:
      - run:
          name: install aws cli v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.0.30.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js 13.8.0
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs

  install_ansible:
    description: install ansible latest
    steps:
      - run:
          name: install ansible latest
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID: 
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.Workflow_ID>>
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.Workflow_ID>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}    
    steps:
      - run:
          name: Revert migrations
          when: on_fail  
          command: |
            res=$(curl -k  https://kvdb.io/${KVDB_BUCKET}/migration_<<parameters.Workflow_ID>>)
            if(( $res==1 ))
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: frontend-end unit test
          command: |
             cd frontend
             npm install
             npm run test
      
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: backend-end unit test
          command: |
             cd backend
             npm install
             npm run test
            
  scan-frontend:
    docker:
       - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: frontend-end scan
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical

  scan-backend:
    docker:
       - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: backend-end scan
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
       - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar and gzip
          command: |
             yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |        
              BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
              echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e2:06:4d:10:57:4d:78:b8:d1:5c:de:51:76:52:2b:7e"]
      - attach_workspace:
          at: ~/     
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
            apk add openssh-client
      - run:
          name: Configure Server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml -u ubuntu

      - destroy-environment      

  run-migrations:
    docker:
       - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
            echo "No migrations are pending!" 
            fi

      - destroy-environment    
      - revert-migrations


  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - restore_cache:
           keys: [frontend-deps]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
            sudo apt install -y python3
      - run:
          name: Get backend url
          command: |
              BACKEND_PUBLIC_IP=$(aws ec2 describe-instances  \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
      
              echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
              cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
           cd frontend
           npm install
           npm run build
           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - persist_to_workspace:
          root: ~/repo
          paths:
            - env_vars

      - destroy-environment    
      - revert-migrations

  deploy-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - install_awscli
      # - install_ansible
      # - install_nodejs
      - add_ssh_keys:
          fingerprints: ["e2:06:4d:10:57:4d:78:b8:d1:5c:de:51:76:52:2b:7e"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: generate backend package
          command: |
            sudo apt install -y python3
            sudo apt install -y tar gzip
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml -u ubuntu


      - destroy-environment    
      - revert-migrations

  # smoke-test:
  #   docker:
  #      - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - install_awscli
  #     - install_nodejs
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #             BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
  #               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #               --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #               --output text)

  #             export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
  #             echo "${API_URL}"
  #             if curl "${API_URL}/api/status" | grep "ok"
  #             then
  #                 exit 0
  #             else
  #                 exit 1
  #             fi

  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           FRONTEND_WEBSITE="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
  #           echo ${FRONTEND_WEBSITE} 
  #           if curl -s ${FRONTEND_WEBSITE} | grep "Welcome"
  #           then
  #             exit 0
  #           else
  #             exit 1
  #           fi

  #     - destroy-environment    
  #     - revert-migrations

  # cloudfront-update:
  #   docker:
  #      - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - install_awscli
  #     - install_nodejs
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Save old workflowID to kvdb.io
  #         command: |
  #             export OLD_WORKFLOWID=$(aws cloudformation list-exports \
  #                --query "Exports[?Name==\'WorkflowID\'].Value" \
  #                --no-paginate --output text)
  #             echo "old workflow Id= $OLD_WORKFLOWID "
  #             curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "$OLD_WORKFLOWID"
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #             aws cloudformation deploy \
  #               --template-file .circleci/files/cloudfront.yml \
  #               --stack-name InitialStack \
  #               --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
  #               --tags project=udapeople
       
  #     - destroy-environment    
  #     - revert-migrations

  # cleanup:
  #   docker:
  #       - image: cimg/base:stable
  #   steps:
  #       - checkout
  #       - install_awscli
  #       - install_nodejs
  #       - run:
  #           name: Remove old stack and files
  #           command: |
  #             export STACKS=($(aws cloudformation list-stacks \
  #               --query "StackSummaries[*].StackName" \
  #               --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
                
  #               echo Stack names: "${STACKS[@]}" 

  #             export OldWorkflowID=$(aws cloudformation \
  #                     list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #                     --no-paginate --output text)

  #             echo OldWorkflowID: "${OldWorkflowID}"        
  #             echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

  #             if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
  #             then
  #               aws s3 rm s3://udapeople-$[OldWorkflowID] --recursive
  #               aws cloudformation delete-stack --stack-name udapeople-backend-$[OldWorkflowID]
  #               aws cloudformation delete-stack --stack-name udapeople-frontend-$[OldWorkflowID]
  #             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]